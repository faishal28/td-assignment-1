- hosts: localhost
  gather_facts: no
  vars_files:
  - cred.yml
  tasks:
  - name:
    pip:
      name: boto3
      state: present
      
  - name: Get public IP of localhost
    ipify_facts:
  
  - name: Creating Security Group for WebServers on AWS
    ec2_group:
      name: WebSG
      description: Security Group for Web Server allowing port for http and ssh
      region: us-west-2
      aws_access_key: "{{ access_key }}"
      aws_secret_key: "{{ secret_key }}"
      rules:
      - proto: all
        cidr_ip: "{{ ipify_public_ip }}/32"
      - proto: all
        group_name: WebSG
      rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
    register: websg
        
  - name: launching ec2 instance for apache webservers
    ec2:
      key_name: VM-us-west-2
      instance_type: t2.micro
      image: ami-0928f4202481dfdf6
      wait: true
      group: WebSG
      count: 2
      vpc_subnet_id: subnet-96088dcb
      assign_public_ip: yes
      region: us-west-2
      state: present
      aws_access_key: "{{ access_key }}"
      aws_secret_key: "{{ secret_key }}"
      instance_tags:
        Name: apache-server
    register: apservers
    
  - name: launching ec2 instance for nginx webserver
    ec2:
      key_name: VM-us-west-2
      instance_type: t2.micro
      image: ami-0928f4202481dfdf6
      wait: true
      group: WebSG
      count: 1
      vpc_subnet_id: subnet-96088dcb
      assign_public_ip: yes
      region: us-west-2
      state: present
      aws_access_key: "{{ access_key }}"
      aws_secret_key: "{{ secret_key }}"
      instance_tags:
        Name: nginx-server
    register: ngservers
    
  - name: Add new apache instance to host group
    add_host:
      hostname: "{{ item.public_ip }}"
      groupname: apache-servers
    loop: "{{ apservers.instances }}"

  - name: Add new nginx instance to host group
    add_host:
      hostname: "{{ item.public_ip }}"
      groupname: nginx-servers
    loop: "{{ ngservers.instances }}"

  - name: Wait for SSH to come up for apache and nginx servers
    wait_for: 
      host: "{{ item.public_dns_name }}"
      port: 22
      state: started
    loop: "{{ apservers.instances + ngservers.instances}}"


- hosts: apache-servers
  gather_facts: no
  tasks:
  - name: running role
    include_role:
      name: apacheserver
      
- hosts: nginx-servers
  gather_facts: no
  tasks:
  - name: running role
    include_role:
      name: nginxserver
      
- name: setup ELB
  hosts: localhost
  gather_facts: no
  vars_files:
  - cred.yml
  tasks:
    - name: setup simple load balancer
      ec2_elb_lb:
        name: elb-demo
        state: present
        region: us-west-2
        security_group_names: 'WebSG'
        subnets: 'subnet-96088dcb, subnet-f99fa2d2'
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 8900
          - protocol: https
            load_balancer_port: 443
            instance_protocol: http
            instance_port: 8900
            ssl_certificate_id: "arn:aws:iam::295971227144:server-certificate/elb-demo-1"
        health_check:
          ping_protocol: http
          ping_port: 8900
          ping_path: "/index.html"
          response_timeout: 5
          interval: 30
          unhealthy_threshold: 2
          healthy_threshold: 10
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
      register: elbdemo
      
    - name: add weservers to elb
      local_action: ec2_elb
      args:
        instance_id: "{{ item.id }}"
        ec2_elbs: elb-demo
        state: present
        region: us-west-2
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
      with_items: "{{ apservers.instances + ngservers.instances}}"
   
  #- name: printing variables
  #  ansible.builtin.debug:
  #    msg: "{{apservers}}"
